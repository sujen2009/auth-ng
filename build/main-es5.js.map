{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/views/login/login.component.html","webpack:///./src/app/views/register/register.component.html","webpack:///./src/app/_services/authentication.service.ts","webpack:///./src/app/_services/index.ts","webpack:///./src/app/_services/user.service.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.ts","webpack:///./src/app/interceptors/auth-header.interceptor.ts","webpack:///./src/app/views/login/login.component.scss","webpack:///./src/app/views/login/login.component.ts","webpack:///./src/app/views/register/register.component.less","webpack:///./src/app/views/register/register.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<!-- nav -->\\n<nav class=\\\"navbar navbar-expand navbar-dark bg-dark\\\" *ngIf=\\\"currentUser\\\">\\n    <div class=\\\"navbar-nav\\\">\\n        <a class=\\\"nav-item nav-link\\\" routerLink=\\\"/\\\">Home</a>\\n        <a class=\\\"nav-item nav-link\\\" (click)=\\\"logout()\\\">Logout</a>\\n    </div>\\n</nav>\\n\\n<!-- main app container -->\\n<div class=\\\"container\\\">\\n    <router-outlet></router-outlet>\\n</div>\"","module.exports = \"<div class=\\\"col-md-6 offset-md-3 mt-5\\\">\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-body\\\">\\n            <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"username\\\">Username</label>\\n                    <input type=\\\"text\\\" formControlName=\\\"username\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.username.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.username.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f.username.errors.required\\\">Username is required</div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"password\\\">Password</label>\\n                    <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n                    </div>\\n                </div>\\n                <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">\\n                    <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\n                    Login\\n                </button>\\n                <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger mt-3 mb-0\\\">{{error}}</div>\\n            </form>\\n            <div class=\\\"login-footer\\\">\\n                <span>\\n                    <a routerLink=\\\"/register\\\">Register</a>\\n                </span> | <span>Forgot a password</span>\\n            </div>\\n        </div>\\n    </div>\\n</div>\"","module.exports = \"<div class=\\\"col-md-6 offset-md-3 mt-5\\\">\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-body\\\">\\n            <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"username\\\">First name:</label>\\n                    <input \\n                    type=\\\"text\\\" \\n                    formControlName=\\\"firstName\\\" \\n                    class=\\\"form-control\\\" \\n                    [ngClass]=\\\"{ 'is-invalid': submitted && formData.username.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && formData.username.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"formData.username.errors.required\\\">First name is required</div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"lastName\\\">Last name:</label>\\n                    <input \\n                    type=\\\"text\\\" \\n                    formControlName=\\\"lastName\\\"\\n                     class=\\\"form-control\\\" \\n                     [ngClass]=\\\"{ 'is-invalid': submitted && formData.username.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && formData.username.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"formData.username.errors.required\\\">Last name is required</div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"username\\\">Username:</label>\\n                    <input \\n                    type=\\\"text\\\" \\n                    formControlName=\\\"username\\\" \\n                    class=\\\"form-control\\\" \\n                    [ngClass]=\\\"{ 'is-invalid': submitted && formData.username.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && formData.username.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"formData.username.errors.required\\\">Username is required</div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"password\\\">Password:</label>\\n                    <input \\n                    type=\\\"password\\\" \\n                    formControlName=\\\"password\\\" \\n                    class=\\\"form-control\\\" \\n                    [ngClass]=\\\"{ 'is-invalid': submitted && formData.password.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && formData.password.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"formData.password.errors.required\\\">Password is required</div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"password\\\">Confirm Password:</label>\\n                    <input \\n                    type=\\\"password\\\" \\n                    formControlName=\\\"confirmPassword\\\" \\n                    class=\\\"form-control\\\" \\n                    [ngClass]=\\\"{ 'is-invalid': submitted && formData.password.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && formData.password.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"formData.password.errors.required\\\">Confirm Password is required</div>\\n                    </div>\\n                </div>\\n                <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">\\n                    <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\n                    Register\\n                </button>\\n                <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger mt-3 mb-0\\\">{{error}}</div>\\n            </form>\\n            <br />\\n            <br />\\n            <button routerLink=\\\"/login\\\" [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">\\n                <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\n                <-Back\\n            </button>\\n        </div>\\n    </div>\\n</div>\"","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from '@environments/environment';\nimport { User } from '@app/_models';\nimport { CookieService } from 'ngx-cookie';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthenticationService {\n    private currentUserSubject: BehaviorSubject<User>;\n    public currentUser: Observable<User>;\n\n    constructor(\n        private http: HttpClient,\n        private readonly cookieService: CookieService\n    ) {\n        this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));\n        this.currentUser = this.currentUserSubject.asObservable();\n    }\n\n    public get currentUserValue(): User {\n        return this.currentUserSubject.value;\n    }\n\n    login(username: string, password: string) {\n        return this.http.post<any>(`${environment.apiUrl}/auth`, { username, password })\n            .pipe(map(user => {\n                // store user details and basic auth credentials in local storage to keep user logged in between page refreshes\n                user.authdata = window.btoa(username + ':' + password);\n                this.cookieService.put('token', user.token, {\n                    domain: 'parknepa.com.np'\n                });\n                localStorage.setItem('currentUser', JSON.stringify(user));\n                this.currentUserSubject.next(user);\n                return user;\n            }));\n    }\n\n    register(userParams: { username: string, password: string, firstName: string, lastName: string }) {\n        return this.http.post<any>(`${environment.apiUrl}/auth/register`, userParams)\n            .pipe(map(user => {\n                // store user details and basic auth credentials in local storage to keep user logged in between page refreshes\n                user.authdata = window.btoa(userParams.username + ':' + userParams.password);\n                console.log('token', user.token);\n                this.cookieService.put('token', user.token);\n                this.cookieService.put('token', user.token, {\n                    domain: 'parknepa.com.np'\n                });\n                localStorage.setItem('currentUser', JSON.stringify(user));\n                this.currentUserSubject.next(user);\n                return user;\n            }));\n    }\n\n    logout() {\n        // remove user from local storage to log user out\n        localStorage.removeItem('currentUser');\n        this.currentUserSubject.next(null);\n    }\n\n    parkings() {\n        return this.http.get(`${environment.apiUrl}/parkings`);\n    }\n}\n","export * from './authentication.service';\nexport * from './user.service';","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { environment } from '@environments/environment';\nimport { User } from '@app/_models';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n    constructor(private http: HttpClient) { }\n\n    getAll() {\n        return this.http.get<User[]>(`${environment.apiUrl}/users`);\n    }\n}","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { AuthenticationService } from './_services';\nimport { User } from './_models';\n\n@Component({ selector: 'app', templateUrl: 'app.component.html' })\nexport class AppComponent {\n    currentUser: User;\n\n    constructor(\n        private router: Router,\n        private authenticationService: AuthenticationService\n    ) {\n        this.authenticationService.currentUser.subscribe(x => this.currentUser = x);\n        this.authenticationService.parkings().subscribe((p) => {\n            console.log(p);\n        })\n    }\n\n    logout() {\n        this.authenticationService.logout();\n        this.router.navigate(['/login']);\n    }\n}","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n\n\nimport { AppComponent } from './app.component';\nimport { appRoutingModule } from './app.routing';\n\nimport { ErrorInterceptor } from './_helpers';\nimport { LoginComponent } from './views/login/login.component';\nimport { RegisterComponent } from './views/register/register.component';\nimport { AuthHeaderInterceptor } from './interceptors/auth-header.interceptor';\nimport { CookieModule } from 'ngx-cookie';\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        ReactiveFormsModule,\n        HttpClientModule,\n        appRoutingModule,\n        CookieModule.forRoot()\n    ],\n    declarations: [\n        AppComponent,\n        LoginComponent\n,\n        RegisterComponent    ],\n    providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: AuthHeaderInterceptor, multi: true }\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Routes, RouterModule } from '@angular/router';\n\nimport { AuthGuard } from './_helpers';\nimport { LoginComponent } from './views/login/login.component';\nimport { RegisterComponent } from './views/register/register.component';\n\nconst routes: Routes = [\n    // { path: '', component: HomeComponent, canActivate: [AuthGuard] },\n    { path: 'login', component: LoginComponent },\n    { path: 'register', component: RegisterComponent },\n    { path: '**', redirectTo: 'login' }\n];\n\nexport const appRoutingModule = RouterModule.forRoot(routes);\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest,\r\n  HttpEvent\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n/**\r\n * HTTP Interceptor to add an Authorization header to all outgoing\r\n * request, if a token is set (i.e. the user is logged in).\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthHeaderInterceptor implements HttpInterceptor {\r\n  /**\r\n   * Creates a new instance of the interceptor and provides services.\r\n   *\r\n   * @param sessionService Used to retrive the token from the user's cookies\r\n   */\r\n  constructor() {}\r\n\r\n  /**\r\n   * Adds the Authorization header if a user token is set in the cookies.\r\n   *\r\n   * @param request The original outgoing request\r\n   * @param next The next HTTP handler to call with the original or modified request\r\n   */\r\n  public intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n      //tslint:disable\r\n      const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZTAwN2U5ZDg5Zjc5YjYxNjQ4NDRlNTAiLCJpYXQiOjE1NzcwOTA3NTR9.DVDpmUxc6OvOMG9-5GPY2AMDauIG20FC_b4g61Gu0i0';\r\n       // tslint:enable\r\n      const newRequest = request.clone({\r\n        setHeaders: {\r\n          Authorization: 'Bearer ' + token\r\n        }\r\n      });\r\n        // Pass the cloned request instead of the original request to the next handle\r\n      return next.handle(newRequest);\r\n  }\r\n}\r\n","module.exports = \".login-footer {\\n  margin-top: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3MvbG9naW4vRDpcXFByb2plY3RzXFxub2RlLWpzXFxhdXRoLW5nL3NyY1xcYXBwXFx2aWV3c1xcbG9naW5cXGxvZ2luLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC92aWV3cy9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGdCQUFBO0FDQ0YiLCJmaWxlIjoic3JjL2FwcC92aWV3cy9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5sb2dpbi1mb290ZXIge1xyXG4gIG1hcmdpbi10b3A6IDMwcHg7XHJcbn1cclxuIiwiLmxvZ2luLWZvb3RlciB7XG4gIG1hcmdpbi10b3A6IDMwcHg7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AuthenticationService } from '@app/_services';\nimport { CookieService } from 'ngx-cookie';\n\n@Component({\n    templateUrl: 'login.component.html',\n    styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n    loginForm: FormGroup;\n    loading = false;\n    submitted = false;\n    returnUrl: string;\n    error = '';\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private cookieService: CookieService,\n        private router: Router,\n        private authenticationService: AuthenticationService\n    ) {\n        // redirect to home if already logged in\n        if (this.authenticationService.currentUserValue) {\n            this.router.navigate(['/']);\n        }\n    }\n\n    ngOnInit() {\n        this.loginForm = this.formBuilder.group({\n            username: ['', Validators.required],\n            password: ['', Validators.required]\n        });\n\n        // get return url from route parameters or default to '/'\n        this.returnUrl = this.route.snapshot.queryParams.returnUrl || '/';\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.loginForm.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // stop here if form is invalid\n        if (this.loginForm.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.authenticationService.login(this.f.username.value, this.f.password.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n                    window.location.href = 'http://parking-ng-parking-node.apps.us-west-1.starter.openshift-online.com/parkings';\n                },\n                error => {\n                    this.error = error.error.message;\n                    this.loading = false;\n                });\n    }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL3JlZ2lzdGVyL3JlZ2lzdGVyLmNvbXBvbmVudC5sZXNzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthenticationService } from '@app/_services';\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.less']\n})\nexport class RegisterComponent implements OnInit {\n  registerForm: FormGroup;\n  loading = false;\n  submitted = false;\n  returnUrl: string;\n  error = '';\n\n  constructor(\n      private formBuilder: FormBuilder,\n      private route: ActivatedRoute,\n      private router: Router,\n      private authenticationService: AuthenticationService\n  ) {\n      // redirect to home if already logged in\n      if (this.authenticationService.currentUserValue) {\n          this.router.navigate(['/']);\n      }\n  }\n\n  ngOnInit() {\n      this.registerForm = this.formBuilder.group({\n          firstName: ['', Validators.required],\n          lastName: ['', Validators.required],\n          username: ['', Validators.required],\n          password: ['', Validators.required],\n          confirmPassword: ['', Validators.required]\n      });\n\n      // get return url from route parameters or default to '/'\n      this.returnUrl = this.route.snapshot.queryParams.returnUrl || '/';\n  }\n\n  // convenience getter for easy access to form fields\n  get formData() { return this.registerForm.controls; }\n\n  onSubmit() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.registerForm.invalid) {\n        return;\n    }\n\n    this.loading = true;\n    const param = {\n        username: this.formData.username.value,\n        password: this.formData.password.value,\n        firstName: this.formData.firstName.value,\n        lastName: this.formData.lastName.value,\n    };\n    this.authenticationService.register(param)\n    .pipe(first())\n    .subscribe( (data) => {\n        this.router.navigate([this.returnUrl]);\n    },\n    (error) => {\n        this.error = error;\n        this.loading = false;\n    });\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false,\n    // apiUrl: 'http://localhost:8080'\n    apiUrl: 'http://parking-node-parking-node.apps.us-west-1.starter.openshift-online.com'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n    .catch(err => console.error(err));\n"],"sourceRoot":""}